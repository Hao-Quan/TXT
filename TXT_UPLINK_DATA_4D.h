// Automatically generated by Simulation Framework ICD utility. DO NOT MODIFY!
// This area refers to ICD [ICD for RC27J] (ver: 1)
// Memory Area Name: TXT_INPUT_DATA (ver: 12) 
// Total size of this area is: 160 bytes.
#ifndef TXT_UPLINK_DATA_DEF
#define TXT_UPLINK_DATA_DEF


#include <stdint.h>


#ifndef __cplusplus
#ifndef bool
#define bool uint32_t
#endif
#endif

#define TXT_INPUT_DATA_VERSION 12

#if defined (_MSC_VER) || defined (__MINGW32__)
#define __attribute__(x)
#pragma pack(push)
#pragma pack(1)
#endif

// ENUM UPLINK

enum POSITION_TYPE {FIX, NAVAID, AIRPORT};
enum ROUTE_CLEARANCE_WPT_LEVEL_TYPE {AT, AT_OR_ABOVE, AT_OR_BELOW};
enum ROUTE_CLEARANCE_WPT_HOLD_DIRECTION {LEFT, RIGHT};
enum ROUTE_CLEARANCE_WPT_FLY_MODE {FLYBY, FLYOVER};
enum LATERAL_DEVIATION_SIDE {LEFT, RIGHT, BOTH};
enum FLIGHT_PHASE {IN_THE_CLIMB, IN_THE_CRUISE, IN_THE_DESCENT};
enum REVISION_REASON_1 {LEVEL_CHANGE, SPEED_CHANGE, RUOTE_CHANGE_AT_A_SPECIFIED_POSITION, RUOTE_CHANGE_AT_MULTIPLE_WAYPOINTS, ENTRY_POINT_CHANGE, CLEARANCE_LIMIT_CHANGE, NAMED_INSTRUCTION_CHANGE, GROUND_LOCATION_CHANGE, ASSIGNED_SPACING_INTERVAL_CHANGE, REVISED_INTERVAL_SPACING_TRAFFIC_ROUTE, PLANNED_TERMINATION_POINT_CHANGE, ARCHIEVE_BY_POINT_CHANGE, INTERVAL_SPACING_CLEARANCE, INTERVAL SPACING TRAFFIC ADDITION, INTERVAL_SPACING_TURN_INTERCEPT_POINT_CHANGE, INTERVAL_SPACING_TRAFFIC_PLANNED_FINAL_APPROACH_SPEED_CHANGE, INTERVAL_SPACING_TRAFFIC_REFERENCE_POINT_CHANGE, INTERVAL_SPACING_TRAFFIC_TRAJECTORY_TERMINATION_POINT_CHANGE};

enum REVISION_REASON_2 {LEVEL_CHANGE, SPEED_CHANGE, RUOTE_CHANGE_AT_A_SPECIFIED_POSITION, RUOTE_CHANGE_AT_MULTIPLE_WAYPOINTS, ENTRY_POINT_CHANGE, CLEARANCE_LIMIT_CHANGE, NAMED_INSTRUCTION_CHANGE, GROUND_LOCATION_CHANGE, ASSIGNED_SPACING_INTERVAL_CHANGE, REVISED_INTERVAL_SPACING_TRAFFIC_ROUTE, PLANNED_TERMINATION_POINT_CHANGE, ARCHIEVE_BY_POINT_CHANGE, INTERVAL_SPACING_CLEARANCE, INTERVAL SPACING TRAFFIC ADDITION, INTERVAL_SPACING_TURN_INTERCEPT_POINT_CHANGE, INTERVAL_SPACING_TRAFFIC_PLANNED_FINAL_APPROACH_SPEED_CHANGE, INTERVAL_SPACING_TRAFFIC_REFERENCE_POINT_CHANGE, INTERVAL_SPACING_TRAFFIC_TRAJECTORY_TERMINATION_POINT_CHANGE};





typedef struct __attribute__((packed)) // This struct will be repeated 1 times in memory
{
	//DATA HEADER
	int32_t FLIGHT_ID_LENGTH;
	char FLIGHT_ID[FLIGHT_ID_LENGTH];
    enum DIRECTION;
    int32_t TIME_STAMP_DATA_YEAR;
    int32_t TIME_STAMP_DATA_MONTH;
    int32_t TIME_STAMP_DATA_DAY;
    int32_t TIME_STAMP_DATA_SECOND;
    int32_t TIME_STAMP_DATA_MINUTE;
    int32_t TIME_STAMP_DATA_HOUR;
    int32_t ID;
    
    // DATA PAYLOAD
    enum POSITION_TYPE;
    int32_t POSITION_NAME_LENGTH;
    char POSITION_NAME[POSITION_NAME_LENGTH];
    float POSITION_LATITUDE;
    float POSITION_LONGITUDE;
    int32_t LEVEL_DATA;
    int32_t RTA_SECOND;
    int32_t RTA_MINUTE;
    int32_t RTA_HOUR;
    int32_t RTA_TOLLERANCE;
    int32_t RTA_SECOND_SECOND;
    int32_t RTA_SECOND_MINUTE;
    int32_t RTA_SECOND_HOUR;
    int32_t RTA_SECOND_TOLLERANCE;
    int32_t SPEED;
    int32_t SPEED_SECOND;
    int32_t DEPARTURE_NAME_PROCEDURE_LENGTH;
    char DEPARTURE_NAME_PROCEDURE[DEPARTURE_NAME_PROCEDURE_LENGTH];
    int32_t DEPARTURE_NAME_AIRPORT_LENGTH;
    char DEPARTURE_NAME_AIRPORT[DEPARTURE_NAME_AIRPORT_LENGTH];
    int32_t DEPARTURE_NAME_RWY_LENGTH;
    char DEPARTURE_NAME_RWY[DEPARTURE_NAME_RWY_LENGTH];
    int32_t DEPARTURE_NAME_TRANS_LENGTH;
    char DEPARTURE_NAME_TRANS[DEPARTURE_NAME_RWY_LENGTH];
    int32_t DEPARTURE_NAME_SID_LENGTH;
    char DEPARTURE_NAME_SID[DEPARTURE_NAME_SID_LENGTH];
    int32_t ROUTE_CLEARANCE_WPT_NUM;
    float ROUTE_CLEARANCE_WPT_POS_LAT;
    float ROUTE_CLEARANCE_WPT_POS_LONG;
    enum ROUTE_CLEARANCE_WPT_LEVEL_TYPE;
    int32_t ROUTE_CLEARANCE_WPT_LEVEL;
    float ROUTE_CLEARANCE_WPT_SPEED;
    int32_t ROUTE_CLEARANCE_WPT_RTA_SECOND;
    int32_t ROUTE_CLEARANCE_WPT_RTA_MINUTE;
    int32_t ROUTE_CLEARANCE_WPT_RTA_HOUR;
    int32_t ROUTE_CLEARANCE_WPT_RTA_TOLERANCE;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_DEGREES;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_DEGREES_TYPE;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_TIME_SECOND;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_TIME_MINUTE;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_TIME_HOUR;
    enum ROUTE_CLEARANCE_WPT_FLY_MODE;
    int32_t ARRIVAL_DATA_PROCEDURE_LENGTH;
    char ARRIVAL_DATA_PROCEDURE[ARRIVAL_DATA_PROCEDURE_LENGTH];
    int32_t ARRIVAL_DATA_AIRPORT_LENGTH;
    char ARRIVAL_DATA_AIRPORT[ARRIVAL_DATA_PROCEDURE_LENGTH];
    int32_t ARRIVAL_DATA_RWY_LENGTH;
    char ARRIVAL_DATA_RWY[ARRIVAL_DATA_RWY_LENGTH];
    int32_t ARRIVAL_DATA_APPROACH_LENGTH;
    char ARRIVAL_DATA_APPROACH[ARRIVAL_DATA_APPROACH_LENGTH];
    int32_t ARRIVAL_DATA_APPROACH_TRANS_LENGTH;
    char ARRIVAL_DATA_APPROACH_TRANS[ARRIVAL_DATA_APPROACH_TRANS_LENGTH];
    int32_t ARRIVAL_DATA_STAR_LENGTH;
    char ARRIVAL_DATA_STAR[ARRIVAL_DATA_STAR_LENGTH];
    int32_t ARRIVAL_DATA_STAR_TRANS_LENGTH;
    char ARRIVAL_DATA_STAR_TRANS[ARRIVAL_DATA_STAR_TRANS_LENGTH];
    enum LATERAL_DEVIATION_SIDE;
    int32_t LATERAL_DEVIATION_DISTANCE;
    enum FLIGHT_PHASE;
    enum REVISION_REASON_1;
    enum REVISION_REASON_2;
    int32_t FREE_TEXT_MESSAGE_LENGTH;
    char FREE_TEXT_MESSAGE[FREE_TEXT_MESSAGE_LENGTH];
    

} TXT_UPLINK_DATA_TYPE;


// ENUM UPLINK - TAXI

enum REVISION_REASON {LEVEL_CHANGE, SPEED_CHANGE, ROUTE_CHANGE AT_A_SPECIFIED_POSITION, ROUTE_CHANGE_AT_MULTIPLE_WAYPOINTS, ENTRY_POINT_CHANGE, CLEARANCE_LIMIT_CHANGE, NAMED_INSTRUCTION_CHANGE, GROUND_LOCATION_CHANGE, ASSIGNED_SPACING_INTERVAL_CHANGE, REVISED INTERVAL_SPACING_TRAFFIC_ROUTE, PLANNED_TERMINATION_POINT_CHANGE, ACHIEVEBY_POINT_CHANGE, INTERVAL_SPACING_CLEARANCE_TYPE_CHANGE, INTERVAL_SPACING_TRAFFIC_ADDITION, INTERVAL_SPACING_TURN_INTERCEPT_POINT_CHANGE, INTERVAL_SPACING_SPACING_TYPE_CHANGE, INTERVAL_SPACING_TRAFFIC_PLANNED_FINAL_APPROACH_SPEED_CHANGE, INTERVAL_SPACING_TRAFFIC_REFERENCE_POINT_CHANGE, OR_INTERVAL_SPACING_TRAFFIC_TRAJECTORY_TERMINATION_POINT_CHANGE};

enum CLEARANCE_TYPE_R {APPROACH, DEPARTURE, FURTHER, STARTUP, PUSHBACK, TAXI, OCEANIC};

enum ASSIGNED_TIME_PERFORM {at, in_accordance_with, after, before};

enum ASSIGNED_TIME_TYPE {CTOT, EDCT, ELDT, EOBT, ETOT, TOBT, TSAT, TTOT, CSTT};

enum PUSH_BACK_DIRECTION {Tail, Facing};

enum TAXI_ROUTE_TYPE {AT, ON, TO, ABEAM, VIA, FROM, ONTO, CLEAR_OF, ACROSS};

enum TAXI_RESUME_CONDITION {LEFT_TO_RIGHT, RIGHT_TO_LEFT};

enum GROUND_LOCATION_TYPE {APRON, GATE, STAND, HOLDING_BAY, HOLDING_POINT, INTERSECTION, HANGAR, NAMED_POINT, RAMP, RUNWAY, TAXILANE, TAXIWAY, TERMINAL, DEICING_POSITION, EXIT, HIGH_SPEED_EXIT, LAT_LONG, DEICING_STOP_POSITION};

enum INTERSECTION_TYPE {POINT, TAXIWAY, RUNWAY};


typedef struct __attribute__((packed)) // This struct will be repeated 1 times in memory
{
    //DATA HEADER
    int32_t FLIGHT_ID_LENGTH;
    char FLIGHT_ID[FLIGHT_ID_LENGTH];
    enum DIRECTION;
    int32_t TIME_STAMP_DATA_YEAR;
    int32_t TIME_STAMP_DATA_MONTH;
    int32_t TIME_STAMP_DATA_DAY;
    int32_t TIME_STAMP_DATA_SECOND;
    int32_t TIME_STAMP_DATA_MINUTE;
    int32_t TIME_STAMP_DATA_HOUR;
    int32_t ID;
    
    // DATA PAYLOAD
    int32_t FREE_TEXT_MESSAGE_LENGTH;
    char FREE_TEXT_MESSAGE[FREE_TEXT_MESSAGE_LENGTH];
    enum REVISION_REASON;
    enum CLEARANCE_TYPE_R;
    enum ASSIGNED_TIME_PERFORM;
    enum ASSIGNED_TIME_TYPE;
    int32_t ASSIGNED_TIME_SECOND;
    int32_t ASSIGNED_TIME_MINUTE;
    int32_t ASSIGNED_TIME_HOUR;
    enum PUSH_BACK_DIRECTION;
    int32_t PUSH_BACK_POSITION_FROM_LENGTH;
    char PUSH_BACK_POSITION_FROM[PUSH_BACK_POSITION_FROM_LENGTH];
    int32_t PUSH_BACK_POSITION_TO_LENGTH;
    char PUSH_BACK_POSITION_TO[PUSH_BACK_POSITION_TO_LENGTH];
    int32_t TAXI_ROUTE_LENGTH;
    int32_t TAXI_ROUTE_NAME_LENGTH;
    char TAXI_ROUTE_NAME;
    enum TAXI_ROUTE_TYPE;
    int32_t TAXI_DURATION;
    enum TAXI_RESUME_CONDITION;
    enum GROUND_LOCATION_TYPE;
    int32_t GROUND_LOCATION_NAME_LENGTH;
    char GROUND_LOCATION_NAME[GROUND_LOCATION_NAME_LENGTH];
    float GROUND_LOCATION_LATITUDE;
    float GROUND_LOCATION_LONGITUDE;
    int32_t RUNWAY_LENGTH;
    char RUNWAY[RUNWAY_LENGTH];
    int32_t DISTANCE_GROUND;
    enum INTERSECTION_TYPE;
    int32_t INTERSECTION_NAME_LENGTH;
    char INTERSECTION_NAME[INTERSECTION_NAME_LENGTH];
    
    
} TXT_UPLINK_TAXI_DATA_TYPE;



// ENUM DOWNLINK
enum INSTRUCTION_NAME_TYPE {CLEARANCE_NAME, PROC_NAME_R};
enum PROCEDURE_TYPE {DEPARTURE, ARRIVAL, APPROACH};
enum ROUTE_CLEARANCE_WPT_LEVEL_TYPE {AT, AT_OR_ABOVE, AT_OR_BELOW};
enum ROUTE_CLEARANCE_WPT_HOLD_DIRECTION{LEFT, RIGHT};
enum ROUTE_CLEARANCE_WPT_HOLD_DEGREES_TYPE{MAG, TRUE};
enum ROUTE_CLEARANCE_WPT_FLY_MODE{FLYBY, FLYOVER};
enum ERROR_INFORMATION_TYPE{UNRECOGNIZED_MESSAGE, INSUFF_RESOURCES, VALIDATION_FAILURE, UNDEFINED};
enum SPECIFIED_REASON_DOWNLINK{OPPOSITE_DIRECTION_TRAFFIC, SAME_DIRECTION_TRAFFIC, CONVERGING_TRAFFIC, CROSSING_TRAFFIC, DIVERGING_TRAFFIC, AIRSPACE_RESTRICTION, INVALID_OCEANIC_ENTRY_POINT, NO_FLIGHT_PLAN_HELD, OCEANIC_CLEARANCE_REQUEST_TOO_LATE};

typedef struct __attribute__((packed)) // This struct will be repeated 1 times in memory
{
    //DATA HEADER
    int32_t FLIGHT_ID_LENGTH;
    char FLIGHT_ID[FLIGHT_ID_LENGTH];
    enum DIRECTION;
    int32_t TIME_STAMP_DATA_YEAR;
    int32_t TIME_STAMP_DATA_MONTH;
    int32_t TIME_STAMP_DATA_DAY;
    int32_t TIME_STAMP_DATA_SECOND;
    int32_t TIME_STAMP_DATA_MINUTE;
    int32_t TIME_STAMP_DATA_HOUR;
    int32_t ID;
    
    // DATA PAYLOAD
    enum INSTRUCTION_NAME_TYPE;
    int32_t INSTRUCTION_NAME_LENGTH;
    char INSTRUCTION_NAME[INSTRUCTION_NAME_LENGTH];
    int32_t DEPARTURE_DATA_PROCEDURE_LENGTH;
    char DEPARTURE_DATA_PROCEDURE[DEPARTURE_DATA_PROCEDURE_LENGTH];
    int32_t DEPARTURE_DATA_AIRPORT_LENGTH;
    char DEPARTURE_DATA_AIRPORT[DEPARTURE_DATA_AIRPORT_LENGTH];
    int32_t DEPARTURE_DATA_RWY_LENGTH;
    char DEPARTURE_DATA_RWY[DEPARTURE_DATA_RWY_LENGTH];
    int32_t DEPARTURE_DATA_SID_LENGTH;
    char DEPARTURE_DATA_SID[DEPARTURE_DATA_SID_LENGTH];
    int32_t DEPARTURE_DATA_TRANS_LENGTH;
    char DEPARTURE_DATA_TRANS[DEPARTURE_DATA_TRANS_LENGTH];
    int32_t ROUTE_CLEARANCE_WPT_NUM;
    int32_t ROUTE_CLEARANCE_WPT_POS_LAT;
    int32_t ROUTE_CLEARANCE_WPT_POS_LONG;
    enum    ROUTE_CLEARANCE_WPT_LEVEL_TYPE;
    int32_t ROUTE_CLEARANCE_WPT_LEVEL;
    int32_t ROUTE_CLEARANCE_WPT_SPEED;
    int32_t ROUTE_CLEARANCE_WPT_RTA_SECOND;
    int32_t ROUTE_CLEARANCE_WPT_RTA_MINUTE;
    int32_t ROUTE_CLEARANCE_WPT_RTA_HOUR;
    int32_t ROUTE_CLEARANCE_WPT_RTA_TOLERANCE;
    enum    ROUTE_CLEARANCE_WPT_HOLD_DIRECTION;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_DEGREES;
    enum    ROUTE_CLEARANCE_WPT_HOLD_DEGREES_TYPE;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_TIME_SECOND;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_TIME_MINUTE;
    int32_t ROUTE_CLEARANCE_WPT_HOLD_TIME_HOUR;
    enum ROUTE_CLEARANCE_WPT_FLY_MODE;
    int32_t ARRIVAL_DATA_PROCEDURE_LENGTH;
    char ARRIVAL_DATA_PROCEDURE[ARRIVAL_DATA_PROCEDURE_LENGTH];
    int32_t ARRIVAL_DATA_AIRPORT_LENGTH;
    char ARRIVAL_DATA_AIRPORT[ARRIVAL_DATA_AIRPORT_LENGTH];
    int32_t ARRIVAL_DATA_RWY_LENGTH;
    char ARRIVAL_DATA_RWY[ARRIVAL_DATA_RWY_LENGTH];
    int32_t ARRIVAL_DATA_APPROACH_LENGTH:
    char ARRIVAL_DATA_APPROACH[ARRIVAL_DATA_APPROACH_LENGTH];
    int32_t ARRIVAL_DATA_APPROACH_TRANS_LENGTH;
    char ARRIVAL_DATA_APPROACH_TRANS[ARRIVAL_DATA_APPROACH_TRANS_LENGTH];
    int32_t ARRIVAL_DATA_STAR_LENGTH;
    char ARRIVAL_DATA_STAR[ARRIVAL_DATA_STAR_LENGTH];
    int32_t ARRIVAL_DATA_STAR_TRANS_LENGTH;
    char ARRIVAL_DATA_STAR_TRANS[ARRIVAL_DATA_STAR_TRANS_LENGTH];
    int32_t ERROR_INFORMATION_REF_NUM;
    enum ERROR_INFORMATION_TYPE;
    enum SPECIFIED_REASON_DOWNLINK;
    int32_t FREE_TEXT_MESSAGE_LENGTH;
    int32_t FREE_TEXT_MESSAGE;
    int32_t SPEED_SCHEDULE_DATA;
    
} TXT_DOWNLINK_DATA_TYPE

// enum type --- Downlink- DTAXI
enum DIRECTION {UP, DOWN};
enum INTERSECTION_TYPE {POINT, TAXIWAY, RUNWAY};
enum CLEARANCE_TYPE_R {APPROACH, DEPARTURE, FURTHER, STARTUP, PUSHBACH, TAXI, OCEANTIC};
enum ASSIGNED_TIME_PERFORM {AT, IN_ACCORDANCE_WITH, AFTER, BEFORE};
enum ASSIGNED_TIME_TYPE {CTOT, EDCT, ELDT, EOBT, ETOT, TOBT, TSAT, TTOT, CSTT};
enum PUSH_BACK_DIRECTION {TAIL, FACING};
enum GROUND_LOCATION_TYPE {APRON, GATE, STAND, HOLDING_BAY, HOLDING_POINT, INTERSECTION, HANGAR, NAMED_POINT, RAMP, RUNWAY, TAXILANE, TAXIWAY, TERMINAL, DEICING_POSITION, EXIT, HIGH_SPEED_EXIT, LAT_LONG, DEICING_STOP_POSITION};
enum TAXI_REQUEST_TYPE {TAXI_TO_POSITION, TAXI_FROM_POSITION, ATIS_CODE};


typedef struct __attribute__((packed)) // This struct will be repeated 1 times in memory
{
    //DATA HEADER
    int32_t FLIGHT_ID_LENGTH;
    char FLIGHT_ID[FLIGHT_ID_LENGTH];
    enum DIRECTION;
    int32_t TIME_STAMP_DATA_YEAR;
    int32_t TIME_STAMP_DATA_MONTH;
    int32_t TIME_STAMP_DATA_DAY;
    int32_t TIME_STAMP_DATA_SECOND;
    int32_t TIME_STAMP_DATA_MINUTE;
    int32_t TIME_STAMP_DATA_HOUR;
    int32_t ID;
    
    // DATA PAYLOAD
    enum INTERSECTION_TYPE;
    int32_t INTERSECTION_NAME_LENGTH;
    char INTERSECTION_NAME[INTERSECTION_NAME_LENGTH];
    int32_t RUNWAY_NAME_LENGTH;
    int32_t RUNWAY_NAME[RUNWAY_NAME_LENGTH];
    enum CLEARANCE_TYPE_R;
    int32_t ASSIGNED_TIME_PERFORM;
    int32_t ASSIGNED_TIME_SECOND;
    int32_t ASSIGNED_TIME_MINUTE;
    int32_t ASSIGNED_TIME_HOUR;
    int32_t PUSH_BACK_POSITION_FROM_LENGTH;
    char PUSH_BACK_POSITION_FROM[PUSH_BACK_POSITION_FROM_LENGTH];
    int32_t PUSH_BACK_POSITION_TO_LENGTH;
    char PUSH_BACK_POSITION_TO[PUSH_BACK_POSITION_TO_LENGTH];
    int32_t GROUND_LOCATION_NAME_LENGTH;
    char GROUND_LOCATION_NAME[GROUND_LOCATION_NAME_LENGTH];
    float GROUND_LOCATION_LATITUDE;
    float GROUND_LOCATION_LONGITUDE;
    int32_t TAXI_REQUEST_POSITION_NAME_LENGTH;
    char TAXI_REQUEST_POSITION_NAME[TAXI_REQUEST_POSITION_NAME_LENGTH];
    int32_t TAXI_REQUEST_ATIS_CODE;
    
    //TO BE CONTINUE...
    
} TXT_DOWNLINK_TAXI_DATA_TYPE;



// Total size is: 160

#if defined (_MSC_VER) || defined (__MINGW32__)
#pragma pack(pop)
#endif

#endif
